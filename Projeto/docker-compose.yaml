# subindo a network
networks:
  projeto:
    name: projetotest
    driver: bridge

services:
  # https://hub.docker.com/_/rabbitmq/
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - '15672:15672'
      - '5672:5672'
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/log:/var/log/rabbitmq
    restart: unless-stopped
    networks: 
      - projeto

    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 40s
      timeout: 10s
      retries: 5
  
  # https://redis.io/docs/install/install-stack/docker/
  redis:
    image: redis/redis-stack
    container_name: redis
    hostname: redis
    ports:
      - 6379:6379 
      - 8001:8001
    volumes:
      - ./redis/data/:/data
    environment:
      - REDIS_ARGS=--save 60 1000 --appendonly yes
      - REDISTIMESERIES_ARGS="RETENTION_POLICY=20"
    networks: 
      - projeto

  # https://github.com/minio/minio/blob/master/docs/orchestration/docker-compose/docker-compose.yaml
  minio:
    image: quay.io/minio/minio
    container_name: minio
    hostname: minio
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ./minio/data:/data
    environment:
      - MINIO_ROOT_USER=ricardo
      - MINIO_ROOT_PASSWORD=test1234
    command: server /data --console-address ":9001"
    networks: 
      - projeto

  # Consumer
  consumer:
    image: projetoconsumer
    build:
      context: ../Projeto/Consumer
    #O -u no comando do docker image for a mesmo que isso basicamente.
    #environment:
    #PYTHONUNBUFFERED: 1
    networks: 
      - projeto
    depends_on: 
      rabbitmq:
        condition: service_healthy

  # Producer
  producer:
    image: projetoproducer
    build:
      context: ../Projeto/Producer
    networks: 
      - projeto
    depends_on:
      - consumer
